name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DB_CONNECTION: mariadb
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: crawler
  DB_TABLE: articles
  DB_USERNAME: root
  DB_PASSWORD: root

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          sudo apt-get update
          sudo apt-get -y install gcc libmariadb3 libmariadb-dev
          sudo systemctl start mysql
          mysql -e "SHOW DATABASES;" -uroot -proot

      - run: |
          mysql -uroot -proot <<MYSQL_SCRIPT
          CREATE DATABASE crawler;
          MYSQL_SCRIPT
          # USE crawler;
          # SET NAMES utf8;
          # SET time_zone = '+00:00';
          # SET foreign_key_checks = 0;
          # SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';
          # SET NAMES utf8mb4;
          # DROP TABLE IF EXISTS \`articles\`;
          # CREATE TABLE \`articles\` (
          #   \`id\` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
          #   \`title\` text COLLATE utf8mb4_unicode_ci NOT NULL,
          #   \`url\` text COLLATE utf8mb4_unicode_ci NOT NULL,
          #   \`time\` datetime NOT NULL,
          #   \`keyword\` text COLLATE utf8mb4_unicode_ci NOT NULL,
          #   \`content\` text COLLATE utf8mb4_unicode_ci NOT NULL,
          #   \`emotional_value\` double DEFAULT NULL,
          #   \`created_at\` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
          #   PRIMARY KEY (\`id\`),
          #   UNIQUE KEY \`url_unique\` (\`url\`(768)) USING HASH,
          #   KEY \`keyword_index\` (\`keyword\`(768))
          # ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - run: poetry install
      # - run: pip install pylint coverage
      - run: poetry run coverage run -m unittest discover
      - run: poetry run coverage report
      - run: poetry run coverage html
      - run: poetry run coverage xml
      - run: poetry run python -m xmlrunner --output-file xunit-result.xml
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage
          path: htmlcov

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
